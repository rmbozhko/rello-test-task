package api

import (
	"rello-test-task/db"

	"github.com/gofiber/fiber/v2" // swagger handler
	"github.com/gofiber/swagger"

	// docs are generated by Swag CLI, you have to import them.
	// replace with your own docs folder, usually "github.com/username/reponame/docs"
	_ "rello-test-task/docs"
)

type ErrResponse struct {
	Error string `json:"error"`
}

// Server serves HTTP requests for attendance service
type Server struct {
	store db.Store
	app   *fiber.App
}

// NewServer creates a new HTTP server and sets up routing.
func NewServer(store db.Store) *Server {
	server := &Server{store: store}
	app := fiber.New()

	app.Get("/buildings", server.GetAllBuildings)     // GET /buildings: List all buildings (with or without the apartments)
	app.Get("/buildings/:id", server.GetBuildingById) // Get a single building by ID
	app.Post("/buildings", server.CreateBuilding)
	app.Delete("/buildings/:id", server.DeleteBuildingById) // Delete a building by ID

	app.Get("/apartments", server.GetAllApartments)     // 	GET /apartments: List all apartments
	app.Get("/apartments/:id", server.GetApartmentById) // GET /apartments/{id}: Get a single apartment by ID
	// GET /apartments/building/{buildingId}: Get all apartments in a specific building
	// POST /apartments: Create a new apartment (update if already exist)
	// DELETE /apartments/{id}: Delete an apartment by ID

	app.Get("/swagger/*", swagger.HandlerDefault)

	server.app = app
	return server
}

// Start runs the HTTP server on a specific address
func (s *Server) Start(address string) error {
	return s.app.Listen(address)
}

func errorResponse(err error) ErrResponse {
	return ErrResponse{Error: err.Error()}
}
